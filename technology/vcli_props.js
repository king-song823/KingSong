import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "你不知道的 JS",
        "link": "technology/你不知道的JS.html"
    },
    'next': {
        "text": "Btyedance",
        "link": "interview/btyedance.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "technology/vcli.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "technology/vcli.html",
    'title': "Vue3 + TypeScript Cli 模板",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Vue3 + TypeScript Cli 模板</h1>\n<p>手把手从 0 到 1 构建一个 Vue3 的模板</p>\n<h2 id="1%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE">1.创建基础项目及配置<a class="anchor" href="#1%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE">§</a></h2>\n<ul>\n<li>\n<ol>\n<li>创建项目</li>\n</ol>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">vue ui\n</code></pre>\n<p><img src="./imgaes/project1.jpg" alt="创建项目"></p>\n<ul>\n<li>\n<ol start="2">\n<li>功能相关</li>\n</ol>\n</li>\n</ul>\n<p><img src="./imgaes/config1.jpg" alt="">\n<img src="./imgaes/config2.jpg" alt=""></p>\n<ul>\n<li>\n<ol start="3">\n<li>配置相关</li>\n</ol>\n</li>\n</ul>\n<p><img src="./imgaes/config3.jpg" alt=""></p>\n<h2 id="2-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86">2. 代码管理<a class="anchor" href="#2-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86">§</a></h2>\n<ul>\n<li>\n<ol>\n<li>初始化本地仓库</li>\n</ol>\n<p>可以下载 Gitkraken,init 找到本地仓库,进行 git 初始化</p>\n</li>\n<li>\n<ol start="2">\n<li>上传远程\n点击 Remote 右侧的+号,上传到远程 github</li>\n</ol>\n<p><img src="./imgaes/remote.jpg" alt="">\n<img src="./imgaes/github.jpg" alt=""></p>\n<p>现在最基础的 v-cli 模板就在你的 github 上啦!</p>\n</li>\n</ul>\n<h2 id="3%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE">3.添加相关插件和配置<a class="anchor" href="#3%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE">§</a></h2>\n<h3 id="%E5%88%9D%E5%A7%8B%E4%BE%9D%E8%B5%96">初始依赖<a class="anchor" href="#%E5%88%9D%E5%A7%8B%E4%BE%9D%E8%B5%96">§</a></h3>\n<p><img src="./imgaes/plugins.jpg" alt=""></p>\n<h3 id="%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9B%B8%E5%85%B3">代码规范相关<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9B%B8%E5%85%B3">§</a></h3>\n<h4 id="1-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83eslint--prettier">1. 代码格式规范(eslint + prettier)<a class="anchor" href="#1-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83eslint--prettier">§</a></h4>\n<ul>\n<li>当我们使用v-cli模板时,选择了eslint+ prettier的模式,所以在eslintrc.js中会扩展以下几种依赖</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"> extends<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'plugin:vue/vue3-essential\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'eslint:recommended\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@vue/typescript/recommended\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@<a class="token email-link" href="mailto:vue/prettier/@typescript">vue/prettier/@typescript</a>-eslint\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@vue/prettier\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<ul>\n<li>之后创建 .prettierrc.js</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  printWidth<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>单行长度\n  tabWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>缩进长度\n  useTabs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>使用空格代替tab缩进\n  semi<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>句末使用分号\n  singleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>使用单引号\n  quoteProps<span class="token punctuation">:</span> <span class="token string">\'as-needed\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>仅在必需时为对象的key添加引号\n  jsxSingleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> jsx中使用单引号\n  trailingComma<span class="token punctuation">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>多行时尽可能打印尾随逗号\n  bracketSpacing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>在对象前后添加空格<span class="token operator">-</span>eg<span class="token punctuation">:</span> { foo<span class="token punctuation">:</span> bar }\n  jsxBracketSameLine<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>多属性html标签的‘<span class="token operator">></span>’折行放置\n  arrowParens<span class="token punctuation">:</span> <span class="token string">\'always\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>单参数箭头函数参数周围使用圆括号<span class="token operator">-</span>eg<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x\n  requirePragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>无需顶部注释即可格式化\n  insertPragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>在已被preitter格式化的文件顶部加上标注\n  proseWrap<span class="token punctuation">:</span> <span class="token string">\'preserve\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>不知道怎么翻译\n  htmlWhitespaceSensitivity<span class="token punctuation">:</span> <span class="token string">\'ignore\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>对HTML全局空白不敏感\n  vueIndentScriptAndStyle<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>不对vue中的script及style标签缩进\n  endOfLine<span class="token punctuation">:</span> <span class="token string">\'lf\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>结束行形式\n  embeddedLanguageFormatting<span class="token punctuation">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>对引用代码进行格式化\n}\n</code></pre>\n<ul>\n<li>创建.prettierignore</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">  # Ignore artifacts<span class="token punctuation">:</span>\n  build\n  coverage\n\n  # Ignore all HTML files<span class="token punctuation">:</span>\n  <span class="token operator">*</span><span class="token punctuation">.</span>html\n</code></pre>\n<ul>\n<li>这时候一般来说会出现eslint和prettier的冲突,所以我们需要安装插件</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token operator">-</span>D eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier\n</code></pre>\n<p>然后在.eslintrc.js的extends中添加</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'plugin:prettier/recommended\'</span><span class="token punctuation">,</span>\n\n</code></pre>\n<ul>\n<li>格式化文档\n<ul>\n<li>格式化所有文档: yarn prettier --write .</li>\n<li>格式化指定文档: yarn prettier --write index.js</li>\n<li>检查是否格式化文档: yarn prettier --check .</li>\n</ul>\n</li>\n</ul>\n<h4 id="2-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83cz-customizablecommitlinthuskyconventional-changelog">2. 代码提交规范(cz-customizable+commitlint+husky+conventional-changelog)<a class="anchor" href="#2-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83cz-customizablecommitlinthuskyconventional-changelog">§</a></h4>\n<ul>\n<li>\n<p>书写commit</p>\n<ul>\n<li>\n<p>cz-customizable(可自定义的 Commitizen 插件,可帮助实现一致的提交消息)</p>\n</li>\n<li>\n<p>安装</p>\n<pre class="language-autoit"><code class="language-autoit">yarn add cz<span class="token operator">-</span>customizable <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<p>在根目录下配置.cz-config.js</p>\n</li>\n<li>\n<p>添加代码</p>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  types<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':sparkles: feat\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✨ feat:     新功能\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':bug: fix\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🐛 fix:      修复bug\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':tada: init\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🎉 init:     初始化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':pencil2: docs\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✏️  docs:     文档变更\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':lipstick: style\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'💄 style:    代码的样式美化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':recycle: refactor\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'♻️  refactor: 重构\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':zap: perf\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'⚡️ perf:     性能优化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':white_check_mark: test\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✅ test:     测试\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':rewind: revert\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'⏪️ revert:   回退\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':package: build\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'📦️ build:    打包\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':rocket: chore\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🚀 chore:    构建/工程依赖/工具\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':construction_worker: ci\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'👷 ci:       CI related changes\'</span>\n    }\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  messages<span class="token punctuation">:</span> {\n    type<span class="token punctuation">:</span> <span class="token string">\'请选择提交类型(必填)\'</span><span class="token punctuation">,</span>\n    customScope<span class="token punctuation">:</span> <span class="token string">\'请输入文件修改范围(可选)\'</span><span class="token punctuation">,</span>\n    subject<span class="token punctuation">:</span> <span class="token string">\'请简要描述提交(必填)\'</span><span class="token punctuation">,</span>\n    body<span class="token punctuation">:</span> <span class="token string">\'请输入详细描述(可选)\'</span><span class="token punctuation">,</span>\n    breaking<span class="token punctuation">:</span> <span class="token string">\'列出任何BREAKING CHANGES(可选)\'</span><span class="token punctuation">,</span>\n    footer<span class="token punctuation">:</span> <span class="token string">\'请输入要关闭的issue(可选)\'</span><span class="token punctuation">,</span>\n    confirmCommit<span class="token punctuation">:</span> <span class="token string">\'确定提交此说明吗？\'</span>\n  }<span class="token punctuation">,</span>\n  allowCustomScopes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  allowBreakingChanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\':sparkles: feat\'</span><span class="token punctuation">,</span> <span class="token string">\':bug: fix\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  subjectLimit<span class="token punctuation">:</span> <span class="token number">72</span>\n}\n\n</code></pre>\n</li>\n<li>\n<p>在package.json中添加脚本</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">"scripts"</span> <span class="token punctuation">:</span> {\n  <span class="token string">"ct"</span><span class="token punctuation">:</span> <span class="token string">"git add . &amp;&amp; cz-customizable"</span>\n}\n</code></pre>\n</li>\n<li>\n<p>这时候当你执行yarn run ct时会显示如下图</p>\n<p><img src="imgaes/git-commit.jpg" alt=""></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>校验commit</p>\n<ul>\n<li>\n<p>commitlint</p>\n<ul>\n<li>检查 commit 是否符合某种规范的校验工具</li>\n<li>安装</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token variable">@commitlint</span><span class="token operator">/</span>cli commitlint<span class="token operator">-</span>config<span class="token operator">-</span>git<span class="token operator">-</span>commit<span class="token operator">-</span>emoji commitlint<span class="token operator">-</span>config<span class="token operator">-</span>cz <span class="token operator">-</span>D\n</code></pre>\n<ul>\n<li>\n<p>配置</p>\n<ul>\n<li>根目录创建commitlint.config.js</li>\n<li>添加代码</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  extends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'git-commit-emoji\'</span><span class="token punctuation">,</span> <span class="token string">\'cz\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>husky</p>\n<ul>\n<li>\n<p>针对 git 流程自动执行 commitlint</p>\n</li>\n<li>\n<p>安装</p>\n<pre class="language-autoit"><code class="language-autoit">yarn add husky <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<p>配置</p>\n<pre class="language-autoit"><code class="language-autoit">npm set<span class="token operator">-</span>script prepare <span class="token string">"husky install"</span>\nnpm run prepare\nnpx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>commit<span class="token operator">-</span>msg <span class="token string">\'npx --no-install commitlint --edit "$1"\'</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>生成日志</p>\n<ul>\n<li>\n<p>conventional-changelog</p>\n<ul>\n<li>可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具</li>\n</ul>\n</li>\n<li>\n<p>安装</p>\n<ul>\n<li>yarn add conventional-changelog-cli conventional-changelog-gitmoji-config -D</li>\n</ul>\n</li>\n<li>\n<p>配置</p>\n<p>在package.json中添加次脚本</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">"scripts"</span> <span class="token punctuation">:</span> {\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token string">"changelog"</span><span class="token punctuation">:</span> <span class="token string">"conventional-changelog -p gitmoji-config -i CHANGELOG.md -s"</span>\n  }\n</code></pre>\n</li>\n<li>\n<p>运行 yarn run changelog</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="3layout-%E5%B1%82-%E2%98%91%EF%B8%8F">3.layout 层 ☑️<a class="anchor" href="#3layout-%E5%B1%82-%E2%98%91%EF%B8%8F">§</a></h2>\n<h3 id="31-%E7%A9%BA-%E2%98%91%EF%B8%8F">3.1 空 ☑️<a class="anchor" href="#31-%E7%A9%BA-%E2%98%91%EF%B8%8F">§</a></h3>\n<h3 id="32-%E5%AF%BC%E8%88%AA%E5%B1%82">3.2 导航层<a class="anchor" href="#32-%E5%AF%BC%E8%88%AA%E5%B1%82">§</a></h3>\n<h2 id="4lib-%E5%B1%82">4.lib 层<a class="anchor" href="#4lib-%E5%B1%82">§</a></h2>\n<h3 id="41-axios-%E7%9A%84%E5%B0%81%E8%A3%85">4.1 axios 的封装<a class="anchor" href="#41-axios-%E7%9A%84%E5%B0%81%E8%A3%85">§</a></h3>\n<h3 id="42-%E5%9B%BD%E9%99%85%E5%8C%96">4.2 国际化<a class="anchor" href="#42-%E5%9B%BD%E9%99%85%E5%8C%96">§</a></h3>\n<h3 id="43-%E6%8F%92%E4%BB%B6">4.3 插件<a class="anchor" href="#43-%E6%8F%92%E4%BB%B6">§</a></h3>\n<h2 id="5router-%E5%B1%82-%E2%98%91%EF%B8%8F">5.router 层 ☑️<a class="anchor" href="#5router-%E5%B1%82-%E2%98%91%EF%B8%8F">§</a></h2>\n<h2 id="6-store-%E5%B1%82">6. store 层<a class="anchor" href="#6-store-%E5%B1%82">§</a></h2>\n<h2 id="7-types-%E5%A3%B0%E6%98%8E">7. types 声明<a class="anchor" href="#7-types-%E5%A3%B0%E6%98%8E">§</a></h2>\n<h2 id="8utils-%E5%B1%82">8.utils 层<a class="anchor" href="#8utils-%E5%B1%82">§</a></h2>\n<h2 id="9views-%E4%B8%9A%E5%8A%A1%E5%B1%82">9.views 业务层<a class="anchor" href="#9views-%E4%B8%9A%E5%8A%A1%E5%B1%82">§</a></h2>\n<h2 id="10micro-service-%E5%B1%82">10.micro-service 层<a class="anchor" href="#10micro-service-%E5%B1%82">§</a></h2>\n<h3 id="1%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA-ts-%E9%A1%B9%E7%9B%AE">1.使用 vue-cli 创建 TS 项目<a class="anchor" href="#1%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA-ts-%E9%A1%B9%E7%9B%AE">§</a></h3>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': React.createElement("h1", { key: "0" }, "Vue3 + TypeScript Cli \u6A21\u677F"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>手把手从 0 到 1 构建一个 Vue3 的模板</p>\n<h2 id="1%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE">1.创建基础项目及配置<a class="anchor" href="#1%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE">§</a></h2>\n<ul>\n<li>\n<ol>\n<li>创建项目</li>\n</ol>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">vue ui\n</code></pre>\n<p><img src="./imgaes/project1.jpg" alt="创建项目"></p>\n<ul>\n<li>\n<ol start="2">\n<li>功能相关</li>\n</ol>\n</li>\n</ul>\n<p><img src="./imgaes/config1.jpg" alt="">\n<img src="./imgaes/config2.jpg" alt=""></p>\n<ul>\n<li>\n<ol start="3">\n<li>配置相关</li>\n</ol>\n</li>\n</ul>\n<p><img src="./imgaes/config3.jpg" alt=""></p>\n<h2 id="2-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86">2. 代码管理<a class="anchor" href="#2-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86">§</a></h2>\n<ul>\n<li>\n<ol>\n<li>初始化本地仓库</li>\n</ol>\n<p>可以下载 Gitkraken,init 找到本地仓库,进行 git 初始化</p>\n</li>\n<li>\n<ol start="2">\n<li>上传远程\n点击 Remote 右侧的+号,上传到远程 github</li>\n</ol>\n<p><img src="./imgaes/remote.jpg" alt="">\n<img src="./imgaes/github.jpg" alt=""></p>\n<p>现在最基础的 v-cli 模板就在你的 github 上啦!</p>\n</li>\n</ul>\n<h2 id="3%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE">3.添加相关插件和配置<a class="anchor" href="#3%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE">§</a></h2>\n<h3 id="%E5%88%9D%E5%A7%8B%E4%BE%9D%E8%B5%96">初始依赖<a class="anchor" href="#%E5%88%9D%E5%A7%8B%E4%BE%9D%E8%B5%96">§</a></h3>\n<p><img src="./imgaes/plugins.jpg" alt=""></p>\n<h3 id="%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9B%B8%E5%85%B3">代码规范相关<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9B%B8%E5%85%B3">§</a></h3>\n<h4 id="1-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83eslint--prettier">1. 代码格式规范(eslint + prettier)<a class="anchor" href="#1-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83eslint--prettier">§</a></h4>\n<ul>\n<li>当我们使用v-cli模板时,选择了eslint+ prettier的模式,所以在eslintrc.js中会扩展以下几种依赖</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"> extends<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'plugin:vue/vue3-essential\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'eslint:recommended\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@vue/typescript/recommended\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@<a class="token email-link" href="mailto:vue/prettier/@typescript">vue/prettier/@typescript</a>-eslint\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'@vue/prettier\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<ul>\n<li>之后创建 .prettierrc.js</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  printWidth<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>单行长度\n  tabWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>缩进长度\n  useTabs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>使用空格代替tab缩进\n  semi<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>句末使用分号\n  singleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>使用单引号\n  quoteProps<span class="token punctuation">:</span> <span class="token string">\'as-needed\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>仅在必需时为对象的key添加引号\n  jsxSingleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> jsx中使用单引号\n  trailingComma<span class="token punctuation">:</span> <span class="token string">\'all\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>多行时尽可能打印尾随逗号\n  bracketSpacing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>在对象前后添加空格<span class="token operator">-</span>eg<span class="token punctuation">:</span> { foo<span class="token punctuation">:</span> bar }\n  jsxBracketSameLine<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>多属性html标签的‘<span class="token operator">></span>’折行放置\n  arrowParens<span class="token punctuation">:</span> <span class="token string">\'always\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>单参数箭头函数参数周围使用圆括号<span class="token operator">-</span>eg<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x\n  requirePragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>无需顶部注释即可格式化\n  insertPragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>在已被preitter格式化的文件顶部加上标注\n  proseWrap<span class="token punctuation">:</span> <span class="token string">\'preserve\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>不知道怎么翻译\n  htmlWhitespaceSensitivity<span class="token punctuation">:</span> <span class="token string">\'ignore\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>对HTML全局空白不敏感\n  vueIndentScriptAndStyle<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>不对vue中的script及style标签缩进\n  endOfLine<span class="token punctuation">:</span> <span class="token string">\'lf\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>结束行形式\n  embeddedLanguageFormatting<span class="token punctuation">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>对引用代码进行格式化\n}\n</code></pre>\n<ul>\n<li>创建.prettierignore</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">  # Ignore artifacts<span class="token punctuation">:</span>\n  build\n  coverage\n\n  # Ignore all HTML files<span class="token punctuation">:</span>\n  <span class="token operator">*</span><span class="token punctuation">.</span>html\n</code></pre>\n<ul>\n<li>这时候一般来说会出现eslint和prettier的冲突,所以我们需要安装插件</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token operator">-</span>D eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier\n</code></pre>\n<p>然后在.eslintrc.js的extends中添加</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">\'plugin:prettier/recommended\'</span><span class="token punctuation">,</span>\n\n</code></pre>\n<ul>\n<li>格式化文档\n<ul>\n<li>格式化所有文档: yarn prettier --write .</li>\n<li>格式化指定文档: yarn prettier --write index.js</li>\n<li>检查是否格式化文档: yarn prettier --check .</li>\n</ul>\n</li>\n</ul>\n<h4 id="2-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83cz-customizablecommitlinthuskyconventional-changelog">2. 代码提交规范(cz-customizable+commitlint+husky+conventional-changelog)<a class="anchor" href="#2-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83cz-customizablecommitlinthuskyconventional-changelog">§</a></h4>\n<ul>\n<li>\n<p>书写commit</p>\n<ul>\n<li>\n<p>cz-customizable(可自定义的 Commitizen 插件,可帮助实现一致的提交消息)</p>\n</li>\n<li>\n<p>安装</p>\n<pre class="language-autoit"><code class="language-autoit">yarn add cz<span class="token operator">-</span>customizable <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<p>在根目录下配置.cz-config.js</p>\n</li>\n<li>\n<p>添加代码</p>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  types<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':sparkles: feat\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✨ feat:     新功能\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':bug: fix\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🐛 fix:      修复bug\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':tada: init\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🎉 init:     初始化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':pencil2: docs\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✏️  docs:     文档变更\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':lipstick: style\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'💄 style:    代码的样式美化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':recycle: refactor\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'♻️  refactor: 重构\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':zap: perf\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'⚡️ perf:     性能优化\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':white_check_mark: test\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'✅ test:     测试\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':rewind: revert\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'⏪️ revert:   回退\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':package: build\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'📦️ build:    打包\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':rocket: chore\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'🚀 chore:    构建/工程依赖/工具\'</span>\n    }<span class="token punctuation">,</span>\n    {\n      value<span class="token punctuation">:</span> <span class="token string">\':construction_worker: ci\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'👷 ci:       CI related changes\'</span>\n    }\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  messages<span class="token punctuation">:</span> {\n    type<span class="token punctuation">:</span> <span class="token string">\'请选择提交类型(必填)\'</span><span class="token punctuation">,</span>\n    customScope<span class="token punctuation">:</span> <span class="token string">\'请输入文件修改范围(可选)\'</span><span class="token punctuation">,</span>\n    subject<span class="token punctuation">:</span> <span class="token string">\'请简要描述提交(必填)\'</span><span class="token punctuation">,</span>\n    body<span class="token punctuation">:</span> <span class="token string">\'请输入详细描述(可选)\'</span><span class="token punctuation">,</span>\n    breaking<span class="token punctuation">:</span> <span class="token string">\'列出任何BREAKING CHANGES(可选)\'</span><span class="token punctuation">,</span>\n    footer<span class="token punctuation">:</span> <span class="token string">\'请输入要关闭的issue(可选)\'</span><span class="token punctuation">,</span>\n    confirmCommit<span class="token punctuation">:</span> <span class="token string">\'确定提交此说明吗？\'</span>\n  }<span class="token punctuation">,</span>\n  allowCustomScopes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  allowBreakingChanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\':sparkles: feat\'</span><span class="token punctuation">,</span> <span class="token string">\':bug: fix\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  subjectLimit<span class="token punctuation">:</span> <span class="token number">72</span>\n}\n\n</code></pre>\n</li>\n<li>\n<p>在package.json中添加脚本</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">"scripts"</span> <span class="token punctuation">:</span> {\n  <span class="token string">"ct"</span><span class="token punctuation">:</span> <span class="token string">"git add . &amp;&amp; cz-customizable"</span>\n}\n</code></pre>\n</li>\n<li>\n<p>这时候当你执行yarn run ct时会显示如下图</p>\n<p><img src="imgaes/git-commit.jpg" alt=""></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>校验commit</p>\n<ul>\n<li>\n<p>commitlint</p>\n<ul>\n<li>检查 commit 是否符合某种规范的校验工具</li>\n<li>安装</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token variable">@commitlint</span><span class="token operator">/</span>cli commitlint<span class="token operator">-</span>config<span class="token operator">-</span>git<span class="token operator">-</span>commit<span class="token operator">-</span>emoji commitlint<span class="token operator">-</span>config<span class="token operator">-</span>cz <span class="token operator">-</span>D\n</code></pre>\n<ul>\n<li>\n<p>配置</p>\n<ul>\n<li>根目录创建commitlint.config.js</li>\n<li>添加代码</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  extends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'git-commit-emoji\'</span><span class="token punctuation">,</span> <span class="token string">\'cz\'</span><span class="token punctuation">]</span>\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>husky</p>\n<ul>\n<li>\n<p>针对 git 流程自动执行 commitlint</p>\n</li>\n<li>\n<p>安装</p>\n<pre class="language-autoit"><code class="language-autoit">yarn add husky <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<p>配置</p>\n<pre class="language-autoit"><code class="language-autoit">npm set<span class="token operator">-</span>script prepare <span class="token string">"husky install"</span>\nnpm run prepare\nnpx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>commit<span class="token operator">-</span>msg <span class="token string">\'npx --no-install commitlint --edit "$1"\'</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>生成日志</p>\n<ul>\n<li>\n<p>conventional-changelog</p>\n<ul>\n<li>可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具</li>\n</ul>\n</li>\n<li>\n<p>安装</p>\n<ul>\n<li>yarn add conventional-changelog-cli conventional-changelog-gitmoji-config -D</li>\n</ul>\n</li>\n<li>\n<p>配置</p>\n<p>在package.json中添加次脚本</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token string">"scripts"</span> <span class="token punctuation">:</span> {\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token string">"changelog"</span><span class="token punctuation">:</span> <span class="token string">"conventional-changelog -p gitmoji-config -i CHANGELOG.md -s"</span>\n  }\n</code></pre>\n</li>\n<li>\n<p>运行 yarn run changelog</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="3layout-%E5%B1%82-%E2%98%91%EF%B8%8F">3.layout 层 ☑️<a class="anchor" href="#3layout-%E5%B1%82-%E2%98%91%EF%B8%8F">§</a></h2>\n<h3 id="31-%E7%A9%BA-%E2%98%91%EF%B8%8F">3.1 空 ☑️<a class="anchor" href="#31-%E7%A9%BA-%E2%98%91%EF%B8%8F">§</a></h3>\n<h3 id="32-%E5%AF%BC%E8%88%AA%E5%B1%82">3.2 导航层<a class="anchor" href="#32-%E5%AF%BC%E8%88%AA%E5%B1%82">§</a></h3>\n<h2 id="4lib-%E5%B1%82">4.lib 层<a class="anchor" href="#4lib-%E5%B1%82">§</a></h2>\n<h3 id="41-axios-%E7%9A%84%E5%B0%81%E8%A3%85">4.1 axios 的封装<a class="anchor" href="#41-axios-%E7%9A%84%E5%B0%81%E8%A3%85">§</a></h3>\n<h3 id="42-%E5%9B%BD%E9%99%85%E5%8C%96">4.2 国际化<a class="anchor" href="#42-%E5%9B%BD%E9%99%85%E5%8C%96">§</a></h3>\n<h3 id="43-%E6%8F%92%E4%BB%B6">4.3 插件<a class="anchor" href="#43-%E6%8F%92%E4%BB%B6">§</a></h3>\n<h2 id="5router-%E5%B1%82-%E2%98%91%EF%B8%8F">5.router 层 ☑️<a class="anchor" href="#5router-%E5%B1%82-%E2%98%91%EF%B8%8F">§</a></h2>\n<h2 id="6-store-%E5%B1%82">6. store 层<a class="anchor" href="#6-store-%E5%B1%82">§</a></h2>\n<h2 id="7-types-%E5%A3%B0%E6%98%8E">7. types 声明<a class="anchor" href="#7-types-%E5%A3%B0%E6%98%8E">§</a></h2>\n<h2 id="8utils-%E5%B1%82">8.utils 层<a class="anchor" href="#8utils-%E5%B1%82">§</a></h2>\n<h2 id="9views-%E4%B8%9A%E5%8A%A1%E5%B1%82">9.views 业务层<a class="anchor" href="#9views-%E4%B8%9A%E5%8A%A1%E5%B1%82">§</a></h2>\n<h2 id="10micro-service-%E5%B1%82">10.micro-service 层<a class="anchor" href="#10micro-service-%E5%B1%82">§</a></h2>\n<h3 id="1%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA-ts-%E9%A1%B9%E7%9B%AE">1.使用 vue-cli 创建 TS 项目<a class="anchor" href="#1%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA-ts-%E9%A1%B9%E7%9B%AE">§</a></h3>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#1%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE" }, "1.\u521B\u5EFA\u57FA\u7840\u9879\u76EE\u53CA\u914D\u7F6E")),
            React.createElement("li", null,
                React.createElement("a", { href: "#2-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86" }, "2. \u4EE3\u7801\u7BA1\u7406")),
            React.createElement("li", null,
                React.createElement("a", { href: "#3%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE" }, "3.\u6DFB\u52A0\u76F8\u5173\u63D2\u4EF6\u548C\u914D\u7F6E"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9D%E5%A7%8B%E4%BE%9D%E8%B5%96" }, "\u521D\u59CB\u4F9D\u8D56")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9B%B8%E5%85%B3" }, "\u4EE3\u7801\u89C4\u8303\u76F8\u5173"),
                        React.createElement("ol", null)))),
            React.createElement("li", null,
                React.createElement("a", { href: "#3layout-%E5%B1%82-%E2%98%91%EF%B8%8F" }, "3.layout \u5C42 \u2611\uFE0F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#31-%E7%A9%BA-%E2%98%91%EF%B8%8F" }, "3.1 \u7A7A \u2611\uFE0F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#32-%E5%AF%BC%E8%88%AA%E5%B1%82" }, "3.2 \u5BFC\u822A\u5C42")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#4lib-%E5%B1%82" }, "4.lib \u5C42"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#41-axios-%E7%9A%84%E5%B0%81%E8%A3%85" }, "4.1 axios \u7684\u5C01\u88C5")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#42-%E5%9B%BD%E9%99%85%E5%8C%96" }, "4.2 \u56FD\u9645\u5316")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#43-%E6%8F%92%E4%BB%B6" }, "4.3 \u63D2\u4EF6")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#5router-%E5%B1%82-%E2%98%91%EF%B8%8F" }, "5.router \u5C42 \u2611\uFE0F")),
            React.createElement("li", null,
                React.createElement("a", { href: "#6-store-%E5%B1%82" }, "6. store \u5C42")),
            React.createElement("li", null,
                React.createElement("a", { href: "#7-types-%E5%A3%B0%E6%98%8E" }, "7. types \u58F0\u660E")),
            React.createElement("li", null,
                React.createElement("a", { href: "#8utils-%E5%B1%82" }, "8.utils \u5C42")),
            React.createElement("li", null,
                React.createElement("a", { href: "#9views-%E4%B8%9A%E5%8A%A1%E5%B1%82" }, "9.views \u4E1A\u52A1\u5C42")),
            React.createElement("li", null,
                React.createElement("a", { href: "#10micro-service-%E5%B1%82" }, "10.micro-service \u5C42"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA-ts-%E9%A1%B9%E7%9B%AE" }, "1.\u4F7F\u7528 vue-cli \u521B\u5EFA TS \u9879\u76EE")))))),
    'author': "ink-song",
    'contributors': [
        "ink-song"
    ],
    'date': "2024-02-05T09:41:51.000Z",
    'updated': null,
    'excerpt': "手把手从 0 到 1 构建一个 Vue3 的模板 1.创建基础项目及配置 - 1. 创建项目 vue ui - 2. 功能相关 - 3. 配置相关 2. 代码管理 - 1. 初始化本地仓库 可以下载 Gitkraken,init 找到本地仓库,进行 git 初始化 - 2. 上传远程 点击...",
    'cover': "./imgaes/project1.jpg",
    'sidebar': [
        {
            "text": "Introduction",
            "link": "introduction/index.html",
            "pagePath": "introduction/README.md"
        },
        {
            "link": "technology/index.html",
            "children": [
                {
                    "text": "Vue3 + TypeScript",
                    "link": "technology/vue3.html",
                    "pagePath": "technology/vue3.md"
                },
                {
                    "text": "TypeScript 积累",
                    "link": "technology/ts.html",
                    "pagePath": "technology/ts.md"
                },
                {
                    "text": "你不知道的 JS",
                    "link": "technology/你不知道的JS.html",
                    "pagePath": "technology/你不知道的JS.md"
                },
                {
                    "text": "Vue3 + TypeScript Cli 模板",
                    "link": "technology/vcli.html",
                    "pagePath": "technology/vcli.md"
                }
            ],
            "pagePath": "technology/README.md",
            "text": "Technology"
        },
        {
            "text": "Interview",
            "children": [
                {
                    "text": "Btyedance",
                    "link": "interview/btyedance.html",
                    "pagePath": "interview/btyedance.md"
                }
            ]
        },
        {
            "text": "Study",
            "children": [
                {
                    "text": "How We Learn",
                    "link": "study/HowWeLearn.html",
                    "pagePath": "study/HowWeLearn.md"
                }
            ]
        },
        {
            "text": "Life",
            "children": [
                {
                    "text": "Guitar",
                    "link": "life/guitar.html",
                    "pagePath": "life/guitar.md"
                }
            ]
        }
    ]
};
