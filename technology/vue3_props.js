import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "link": "technology/index.html",
        "text": "Technology"
    },
    'next': {
        "text": "TypeScript 积累",
        "link": "technology/ts.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "technology/vue3.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "technology/vue3.html",
    'title': "Vue3 + TypeScript",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Vue3 + TypeScript</h1>\n<p>使用Vue3+ TypeScript打造一个企业级组件库</p>\n<h2 id="1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">1.目录结构<a class="anchor" href="#1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">§</a></h2>\n<ol>\n<li>项目结构</li>\n<li>开发模式讲解</li>\n<li>Vue3的定义</li>\n<li>单元测试</li>\n<li>高泛用性的API</li>\n<li>响应式原理</li>\n<li>完善功能开发</li>\n<li>自动化发布流程</li>\n</ol>\n<h2 id="2%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2.启动项目准备工作<a class="anchor" href="#2%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">§</a></h2>\n<h3 id="1vue3%E6%9B%B4%E6%96%B0%E6%A6%82%E8%A7%88">1.Vue3更新概览<a class="anchor" href="#1vue3%E6%9B%B4%E6%96%B0%E6%A6%82%E8%A7%88">§</a></h3>\n<ol>\n<li><a href="https://github.com/vuejs/rfcs">vue RFCS</a></li>\n<li>slot Api 的变化\n<ol>\n<li>可通过#header 代表具名插槽</li>\n</ol>\n</li>\n<li>全局 Api的变化\n<ol>\n<li>直接通过import 导入即可</li>\n</ol>\n</li>\n<li>Compontent-Api</li>\n</ol>\n<h3 id="2%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BAts%E9%A1%B9%E7%9B%AE">2.使用vue-cli创建TS项目<a class="anchor" href="#2%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BAts%E9%A1%B9%E7%9B%AE">§</a></h3>\n<ol>\n<li>安装vue-cli<pre class="language-autoit"><code class="language-autoit">cnpm i <span class="token operator">-</span>g <span class="token variable">@vue</span><span class="token operator">/</span>cli\n</code></pre>\n</li>\n<li>创建项目<pre class="language-autoit"><code class="language-autoit">vue create project\n</code></pre>\n</li>\n<li>配置项目（TS版本）\n<img src="./imgaes/config.png" alt="Image of Yaktocat"></li>\n</ol>\n<h3 id="3%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7prettier">3.格式化工具prettier<a class="anchor" href="#3%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7prettier">§</a></h3>\n<ol>\n<li>在项目中创建.prettierrc文件</li>\n<li>配置<pre class="language-autoit"><code class="language-autoit">{\n   <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>不需要分号<span class="token punctuation">)</span>\n   <span class="token string">"singleQuote"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> （单引号）\n   <span class="token string">"arrowParens"</span><span class="token punctuation">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> （剪头函数需要（））\n   <span class="token string">"trailingComma"</span><span class="token punctuation">:</span> <span class="token string">"all"</span> （结尾以<span class="token string">\',\'</span>结束）\n }\n</code></pre>\n</li>\n<li>使用\n<ol>\n<li>打开设置， 搜索formatter，</li>\n<li>勾选 Editor: Format On Save 即可（在工作区而不是在user）</li>\n</ol>\n</li>\n</ol>\n<h3 id="4h%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E6%83%85%E8%A7%A3%E8%AF%BB">4.h函数的详情解读<a class="anchor" href="#4h%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E6%83%85%E8%A7%A3%E8%AF%BB">§</a></h3>\n<ol>\n<li>可使用import的方式导入api<pre class="language-autoit"><code class="language-autoit">import { createApp<span class="token punctuation">,</span> h } from <span class="token string">\'vue\'</span>\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre>\n</li>\n<li>h函数类似react的createElement， 接收三个参数， h(节点类型，节点属性，children选项))<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/images/h.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span>\n <span class="token operator">&lt;</span>HelloWorld msg<span class="token operator">=</span><span class="token string">"xasdadas"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"12"</span>  <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\n使用h函数可转换成如下代码\n<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'/images/h.png\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> eslint<span class="token operator">-</span>disable<span class="token operator">-</span>line\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  <span class="token function">render</span><span class="token punctuation">(</span>{\n    return <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span> {\n      id<span class="token punctuation">:</span> <span class="token string">\'app\'</span>\n    }<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">\'img\'</span><span class="token punctuation">,</span> {\n        alt<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        src<span class="token punctuation">:</span> img\n      }<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">h</span><span class="token punctuation">(</span>HelloWord<span class="token punctuation">,</span> {\n        msg<span class="token punctuation">:</span> <span class="token string">\'xasdadas\'</span><span class="token punctuation">,</span>\n        age<span class="token punctuation">:</span> <span class="token number">12</span>\n      }<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  }<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n</li>\n<li>图片导入这块的可通过require的方式进行导入，如果遇到eslint的报错，可使用// eslint-diasble-line</li>\n<li>h函数源码解析\n<img src="./imgaes/h%E5%87%BD%E6%95%B0.png" alt="Image of Yaktocat"></li>\n<li>watchEffect注意点<pre class="language-autoit"><code class="language-autoit"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>只监听这个h的值的变化\n}<span class="token punctuation">)</span>\n</code></pre>\n</li>\n</ol>\n<h3 id="5%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91vue3%E7%BB%84%E4%BB%B6">5.使用jsx开发vue3组件<a class="anchor" href="#5%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91vue3%E7%BB%84%E4%BB%B6">§</a></h3>\n<ol>\n<li>如何改造\n<ol>\n<li>下载依赖</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token variable">@vue</span><span class="token operator">/</span>babel<span class="token operator">-</span>plugin<span class="token operator">-</span>jsx <span class="token operator">-</span>D\n\n</code></pre>\n<ol start="2">\n<li>在babel.config.js中配置</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@vue/babel-plugin-jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n}\n</code></pre>\n<ol start="3">\n<li>创建一个.tsx结尾的文件</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">import { defineComponent<span class="token punctuation">,</span> reactive } from <span class="token string">\'vue\'</span>\nimport HelloWord from <span class="token string">\'./HelloWorld\'</span>\nfunction <span class="token function">renderHelloWord</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> number<span class="token punctuation">)</span> {\n  return <span class="token operator">&lt;</span>HelloWord age<span class="token operator">=</span>{num} <span class="token operator">/</span><span class="token operator">></span>\n}\nexport <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>{\n        name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      }<span class="token punctuation">)</span>\n      return <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          {<span class="token function">renderHelloWord</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>}\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token number">1231</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n          <span class="token operator">&lt;</span>p<span class="token operator">></span>{state<span class="token punctuation">.</span>name}<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>\n    }\n  }<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n</li>\n<li>使用tsx的优势\n<ul>\n<li>使用组件时，可提供eslint的格式化校验</li>\n<li>变量声明</li>\n<li>抽离共有逻辑,更加灵活<pre class="language-autoit"><code class="language-autoit">import { defineComponent } from <span class="token string">\'vue\'</span>\n<span class="token keyword">const</span> PropsType <span class="token operator">=</span> {\n  msg<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> {\n    type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n} as <span class="token keyword">const</span>\nexport <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  props<span class="token punctuation">:</span> PropsType<span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>span<span class="token operator">></span>我是你<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n        {props<span class="token punctuation">.</span>age}\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  }<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id="3json-schema%E6%A0%87%E5%87%86%E5%92%8C%E4%BD%BF%E7%94%A8">3.Json-schema标准和使用<a class="anchor" href="#3json-schema%E6%A0%87%E5%87%86%E5%92%8C%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="1ajv%E6%A0%A1%E9%AA%8Cjson-schema">1.Ajv校验json-schema<a class="anchor" href="#1ajv%E6%A0%A1%E9%AA%8Cjson-schema">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>下载依赖</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">yarn add ajv <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<ol start="2">\n<li>引入ajv</li>\n</ol>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">*</span> eslint<span class="token operator">-</span>disable <span class="token operator">*</span><span class="token operator">/</span> 在typeScript中使用import会导致报错， 这使用eslint<span class="token operator">-</span>disable规避require的方式\n<span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n<span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> schema <span class="token operator">=</span> {\n  type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  properties<span class="token punctuation">:</span> {\n    name<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n      minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    age<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    record<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>{\n          type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n        }<span class="token punctuation">,</span>\n        {\n          type<span class="token punctuation">:</span> <span class="token string">\'number\'</span>\n        }<span class="token punctuation">,</span>\n      <span class="token punctuation">]</span>\n    }\n  }\n}\n<span class="token keyword">const</span> validate <span class="token operator">=</span> ajv<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n<span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span> <span class="token string">\'21312311231asddada\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n  record<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'sda\'</span><span class="token punctuation">,</span> <span class="token number">12131</span><span class="token punctuation">]</span>\n}<span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>!valid<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n\n</code></pre>\n<ol start="3">\n<li>format自定义ajv</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n<span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\najv<span class="token punctuation">.</span><span class="token function">addFormat</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  return data <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">\'hhh\'</span>\n}<span class="token punctuation">)</span>\n\nname<span class="token punctuation">:</span> {\n  type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n  minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  format<span class="token punctuation">:</span> <span class="token string">\'tset\'</span>\n}<span class="token punctuation">,</span>\n\n</code></pre>\n<h3 id="2ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97">2.Ajv自定义关键字<a class="anchor" href="#2ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97">§</a></h3>\n<pre><code>  1. 使用validate\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">   <span class="token operator">/</span><span class="token operator">*</span> eslint<span class="token operator">-</span>disable <span class="token operator">*</span><span class="token operator">/</span>\n <span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n <span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n <span class="token keyword">const</span> schema <span class="token operator">=</span> {\n   type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n   properties<span class="token punctuation">:</span> {\n     name<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n       <span class="token operator">/</span><span class="token operator">/</span> minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n       <span class="token operator">/</span><span class="token operator">/</span> format<span class="token punctuation">:</span> <span class="token string">\'test\'</span><span class="token punctuation">,</span>\n       test<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n     }<span class="token punctuation">,</span>\n     age<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n     }<span class="token punctuation">,</span>\n     record<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n       items<span class="token punctuation">:</span> <span class="token punctuation">[</span>{\n           type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n         }<span class="token punctuation">,</span>\n         {\n           type<span class="token punctuation">:</span> <span class="token string">\'number\'</span>\n         }<span class="token punctuation">,</span>\n       <span class="token punctuation">]</span>\n     }\n   }\n }\n <span class="token operator">/</span><span class="token operator">/</span> 自定义关键字\n ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n   <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span>schema <span class="token operator">==</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> return <span class="token boolean">true</span>\n     <span class="token keyword">else</span> return data<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">6</span>\n     return <span class="token boolean">true</span>\n   }\n }<span class="token punctuation">)</span>\n <span class="token keyword">const</span> validate <span class="token operator">=</span> ajv<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n <span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>{\n   name<span class="token punctuation">:</span> <span class="token string">\'hhhs22\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n   record<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'sda\'</span><span class="token punctuation">,</span> <span class="token number">12131</span><span class="token punctuation">]</span>\n }<span class="token punctuation">)</span>\n <span class="token keyword">if</span> <span class="token punctuation">(</span>!valid<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n</code></pre>\n<pre><code>  1. 使用compile\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n <span class="token function">compile</span><span class="token punctuation">(</span>sche<span class="token punctuation">,</span> parentSchema<span class="token punctuation">)</span> {\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sche<span class="token punctuation">,</span> parentSchema<span class="token punctuation">)</span>\n   return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n   }\n }<span class="token punctuation">)</span>\n 需要返回函数\n</code></pre>\n<pre><code>  1. 使用mataSchema\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n metaSchema<span class="token punctuation">:</span> {\n   type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n   }\n }<span class="token punctuation">)</span>\n 会检测每一个校验的值是否为string类型\n</code></pre>\n<h3 id="3ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">3.Ajv自定义错误信息<a class="anchor" href="#3ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">  ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n    validate<span class="token punctuation">:</span> function <span class="token function">fun</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n      fun<span class="token punctuation">.</span>errors <span class="token operator">=</span> <span class="token punctuation">[</span>\n        {\n          keyword<span class="token punctuation">:</span> <span class="token string">\'test\'</span><span class="token punctuation">,</span>\n          message<span class="token punctuation">:</span> <span class="token string">\'自定义错误信息\'</span>\n        }\n      <span class="token punctuation">]</span>\n    } \n  }\n\n</code></pre>\n<h2 id="4%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B">4.开发组件库的主流程<a class="anchor" href="#4%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B">§</a></h2>\n<h3 id="%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0schema">开始实现schema<a class="anchor" href="#%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0schema">§</a></h3>\n<h4 id="%E4%B8%80%E8%88%AC%E4%BC%9A%E5%88%9B%E5%BB%BAtypes%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%A5%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B">一般会创建types文件夹来声明类型<a class="anchor" href="#%E4%B8%80%E8%88%AC%E4%BC%9A%E5%88%9B%E5%BB%BAtypes%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%A5%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">export <span class="token keyword">enum</span> SchemaTypes {\n  <span class="token string">\'NUMBER\'</span> <span class="token operator">=</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'STRING\'</span> <span class="token operator">=</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'INTEGER\'</span> <span class="token operator">=</span> <span class="token string">\'interger\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'OBJECT\'</span> <span class="token operator">=</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'ARRAY\'</span> <span class="token operator">=</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'BOOLEAN\'</span> <span class="token operator">=</span> <span class="token string">\'boolean\'</span><span class="token punctuation">,</span>\n}\n\ntype SchemaRef <span class="token operator">=</span> { <span class="token variable">$ref</span><span class="token punctuation">:</span> string }\nexport interface Schema {\n  type<span class="token punctuation">:</span> SchemaTypes | string\n  <span class="token keyword">const</span><span class="token operator">?</span><span class="token punctuation">:</span> any\n  format<span class="token operator">?</span><span class="token punctuation">:</span> string\n  <span class="token keyword">default</span><span class="token operator">?</span><span class="token punctuation">:</span> any\n  properties<span class="token operator">?</span><span class="token punctuation">:</span> {\n    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> Schema | { <span class="token variable">$ref</span><span class="token punctuation">:</span> string }\n  }\n  item<span class="token operator">?</span><span class="token punctuation">:</span> Schema | Schema<span class="token punctuation">[</span><span class="token punctuation">]</span> | SchemaRef\n  dependcecies<span class="token operator">?</span><span class="token punctuation">:</span> {\n    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> | Schema | SchemaRef\n  }\n  oneOf<span class="token operator">?</span><span class="token punctuation">:</span> Schema<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">/</span><span class="token operator">/</span> vjsf<span class="token operator">?</span><span class="token punctuation">:</span> VueJsonSchemaConfig\n  required<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">enum</span><span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  enumKeyvalue<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  additionalProperties<span class="token operator">?</span><span class="token punctuation">:</span> any\n  additionalItems<span class="token operator">?</span><span class="token punctuation">:</span> Schema\n}\n\n</code></pre>\n<h3 id="%E4%BD%BF%E7%94%A8vue-jss-%E5%8F%AF%E5%AE%9E%E7%8E%B0css%E7%9A%84js%E5%8C%96">使用vue-jss 可实现css的js化<a class="anchor" href="#%E4%BD%BF%E7%94%A8vue-jss-%E5%8F%AF%E5%AE%9E%E7%8E%B0css%E7%9A%84js%E5%8C%96">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">import { createUseStyles } from <span class="token string">\'vue-jss\'</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">createUseStyles</span><span class="token punctuation">(</span>{\n  container<span class="token punctuation">:</span> {\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token punctuation">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token string">\'100%\'</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token string">\'1200px\'</span><span class="token punctuation">,</span>\n    margin<span class="token punctuation">:</span> <span class="token string">\'0 auto\'</span><span class="token punctuation">,</span>\n  }\n}<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> classesRef <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> classes <span class="token operator">=</span> classesRef<span class="token punctuation">.</span>value\n<span class="token operator">&lt;</span>div class<span class="token operator">=</span>{classes<span class="token punctuation">.</span>container}<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n</code></pre>\n<blockquote>\n<ul>\n<li>Captain Janeway</li>\n</ul>\n</blockquote>\n<h3 id="code">Code<a class="anchor" href="#code">§</a></h3>\n<p>There are many different ways to style code with GitHub\'s markdown. If you have inline code blocks, wrap them in backticks: <code>var example = true</code>.  If you\'ve got a longer block of code, you can indent with four spaces:</p>\n<pre><code>if (isAwesome){\n  return true\n}\n</code></pre>\n<p>GitHub also supports something called code fencing, which allows for multiple lines without indentation:</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">if</span> <span class="token punctuation">(</span>isAwesome<span class="token punctuation">)</span>{\n  return <span class="token boolean">true</span>\n}\n</code></pre>\n<p>And if you\'d like to use syntax highlighting, include the language:</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isAwesome<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="highlight-specific-lines">Highlight specific lines<a class="anchor" href="#highlight-specific-lines">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n<span class="highlighted-line">|   └── index<span class="token punctuation">.</span>html</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">└── docs    # Source directory</span><span class="highlighted-line">    └── README<span class="token punctuation">.</span>md</span></code></pre><h3 id="tables">Tables<a class="anchor" href="#tables">§</a></h3>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content from cell 1</td>\n<td>Content from cell 2</td>\n</tr>\n<tr>\n<td>Content in the first column</td>\n<td>Content in the second column</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="extras">Extras<a class="anchor" href="#extras">§</a></h2>\n<p>Pagic supports many extras in markdown.</p>\n<h3 id="tex-katex">TeX (KaTeX)<a class="anchor" href="#tex-katex">§</a></h3>\n<p>Inline: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Block:</p>\n<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mrow><mo fence="true">(</mo><msqrt><mrow><mi>ϕ</mi><msqrt><mn>5</mn></msqrt></mrow></msqrt><mo>−</mo><mi>ϕ</mi><mo fence="true">)</mo><msup><mi>e</mi><mrow><mfrac><mn>2</mn><mn>5</mn></mfrac><mi>π</mi></mrow></msup></mrow></mfrac><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>4</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>6</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>8</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mo>⋯</mo></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\n  \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\n  \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {\n    1+\frac{e^{-6\pi}}\n    {1+\frac{e^{-8\pi}}{1+\cdots}}\n  }\n}\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.01146em;vertical-align:-1.69002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mopen"><span class="delimsizing size2">(</span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.04139em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">ϕ</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width=\'400em\' height=\'1.08em\' viewBox=\'0 0 400000 1080\' preserveAspectRatio=\'xMinYMin slice\'><path d=\'M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.0013900000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width=\'400em\' height=\'1.28em\' viewBox=\'0 0 400000 1296\' preserveAspectRatio=\'xMinYMin slice\'><path d=\'M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z\'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19860999999999995em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose"><span class="delimsizing size2">)</span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.93957em;"><span style="top:-3.3485500000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.38em;"><span class="pstrut" style="height:3.15em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.827em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.69002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.692383em;vertical-align:-2.201275em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.19358em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.91642em;"><span style="top:-2.4519800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.229757142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32544em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="minner mtight">⋯</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">8</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.61533em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2097642857142856em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3948549999999997em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.201275em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': React.createElement("h1", { key: "0" }, "Vue3 + TypeScript"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>使用Vue3+ TypeScript打造一个企业级组件库</p>\n<h2 id="1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">1.目录结构<a class="anchor" href="#1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">§</a></h2>\n<ol>\n<li>项目结构</li>\n<li>开发模式讲解</li>\n<li>Vue3的定义</li>\n<li>单元测试</li>\n<li>高泛用性的API</li>\n<li>响应式原理</li>\n<li>完善功能开发</li>\n<li>自动化发布流程</li>\n</ol>\n<h2 id="2%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2.启动项目准备工作<a class="anchor" href="#2%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">§</a></h2>\n<h3 id="1vue3%E6%9B%B4%E6%96%B0%E6%A6%82%E8%A7%88">1.Vue3更新概览<a class="anchor" href="#1vue3%E6%9B%B4%E6%96%B0%E6%A6%82%E8%A7%88">§</a></h3>\n<ol>\n<li><a href="https://github.com/vuejs/rfcs">vue RFCS</a></li>\n<li>slot Api 的变化\n<ol>\n<li>可通过#header 代表具名插槽</li>\n</ol>\n</li>\n<li>全局 Api的变化\n<ol>\n<li>直接通过import 导入即可</li>\n</ol>\n</li>\n<li>Compontent-Api</li>\n</ol>\n<h3 id="2%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BAts%E9%A1%B9%E7%9B%AE">2.使用vue-cli创建TS项目<a class="anchor" href="#2%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BAts%E9%A1%B9%E7%9B%AE">§</a></h3>\n<ol>\n<li>安装vue-cli<pre class="language-autoit"><code class="language-autoit">cnpm i <span class="token operator">-</span>g <span class="token variable">@vue</span><span class="token operator">/</span>cli\n</code></pre>\n</li>\n<li>创建项目<pre class="language-autoit"><code class="language-autoit">vue create project\n</code></pre>\n</li>\n<li>配置项目（TS版本）\n<img src="./imgaes/config.png" alt="Image of Yaktocat"></li>\n</ol>\n<h3 id="3%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7prettier">3.格式化工具prettier<a class="anchor" href="#3%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7prettier">§</a></h3>\n<ol>\n<li>在项目中创建.prettierrc文件</li>\n<li>配置<pre class="language-autoit"><code class="language-autoit">{\n   <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>不需要分号<span class="token punctuation">)</span>\n   <span class="token string">"singleQuote"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> （单引号）\n   <span class="token string">"arrowParens"</span><span class="token punctuation">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> （剪头函数需要（））\n   <span class="token string">"trailingComma"</span><span class="token punctuation">:</span> <span class="token string">"all"</span> （结尾以<span class="token string">\',\'</span>结束）\n }\n</code></pre>\n</li>\n<li>使用\n<ol>\n<li>打开设置， 搜索formatter，</li>\n<li>勾选 Editor: Format On Save 即可（在工作区而不是在user）</li>\n</ol>\n</li>\n</ol>\n<h3 id="4h%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E6%83%85%E8%A7%A3%E8%AF%BB">4.h函数的详情解读<a class="anchor" href="#4h%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E6%83%85%E8%A7%A3%E8%AF%BB">§</a></h3>\n<ol>\n<li>可使用import的方式导入api<pre class="language-autoit"><code class="language-autoit">import { createApp<span class="token punctuation">,</span> h } from <span class="token string">\'vue\'</span>\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre>\n</li>\n<li>h函数类似react的createElement， 接收三个参数， h(节点类型，节点属性，children选项))<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/images/h.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span>\n <span class="token operator">&lt;</span>HelloWorld msg<span class="token operator">=</span><span class="token string">"xasdadas"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"12"</span>  <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\n使用h函数可转换成如下代码\n<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'/images/h.png\'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> eslint<span class="token operator">-</span>disable<span class="token operator">-</span>line\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  <span class="token function">render</span><span class="token punctuation">(</span>{\n    return <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span> {\n      id<span class="token punctuation">:</span> <span class="token string">\'app\'</span>\n    }<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">\'img\'</span><span class="token punctuation">,</span> {\n        alt<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        src<span class="token punctuation">:</span> img\n      }<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">h</span><span class="token punctuation">(</span>HelloWord<span class="token punctuation">,</span> {\n        msg<span class="token punctuation">:</span> <span class="token string">\'xasdadas\'</span><span class="token punctuation">,</span>\n        age<span class="token punctuation">:</span> <span class="token number">12</span>\n      }<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  }<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n</li>\n<li>图片导入这块的可通过require的方式进行导入，如果遇到eslint的报错，可使用// eslint-diasble-line</li>\n<li>h函数源码解析\n<img src="./imgaes/h%E5%87%BD%E6%95%B0.png" alt="Image of Yaktocat"></li>\n<li>watchEffect注意点<pre class="language-autoit"><code class="language-autoit"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>只监听这个h的值的变化\n}<span class="token punctuation">)</span>\n</code></pre>\n</li>\n</ol>\n<h3 id="5%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91vue3%E7%BB%84%E4%BB%B6">5.使用jsx开发vue3组件<a class="anchor" href="#5%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91vue3%E7%BB%84%E4%BB%B6">§</a></h3>\n<ol>\n<li>如何改造\n<ol>\n<li>下载依赖</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">yarn add <span class="token variable">@vue</span><span class="token operator">/</span>babel<span class="token operator">-</span>plugin<span class="token operator">-</span>jsx <span class="token operator">-</span>D\n\n</code></pre>\n<ol start="2">\n<li>在babel.config.js中配置</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> {\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@vue/babel-plugin-jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n}\n</code></pre>\n<ol start="3">\n<li>创建一个.tsx结尾的文件</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">import { defineComponent<span class="token punctuation">,</span> reactive } from <span class="token string">\'vue\'</span>\nimport HelloWord from <span class="token string">\'./HelloWorld\'</span>\nfunction <span class="token function">renderHelloWord</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> number<span class="token punctuation">)</span> {\n  return <span class="token operator">&lt;</span>HelloWord age<span class="token operator">=</span>{num} <span class="token operator">/</span><span class="token operator">></span>\n}\nexport <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>{\n        name<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      }<span class="token punctuation">)</span>\n      return <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          {<span class="token function">renderHelloWord</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>}\n          <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token number">1231</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n          <span class="token operator">&lt;</span>p<span class="token operator">></span>{state<span class="token punctuation">.</span>name}<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">)</span>\n    }\n  }<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n</li>\n<li>使用tsx的优势\n<ul>\n<li>使用组件时，可提供eslint的格式化校验</li>\n<li>变量声明</li>\n<li>抽离共有逻辑,更加灵活<pre class="language-autoit"><code class="language-autoit">import { defineComponent } from <span class="token string">\'vue\'</span>\n<span class="token keyword">const</span> PropsType <span class="token operator">=</span> {\n  msg<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> {\n    type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n} as <span class="token keyword">const</span>\nexport <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>{\n  props<span class="token punctuation">:</span> PropsType<span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>span<span class="token operator">></span>我是你<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n        {props<span class="token punctuation">.</span>age}\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  }<span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id="3json-schema%E6%A0%87%E5%87%86%E5%92%8C%E4%BD%BF%E7%94%A8">3.Json-schema标准和使用<a class="anchor" href="#3json-schema%E6%A0%87%E5%87%86%E5%92%8C%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="1ajv%E6%A0%A1%E9%AA%8Cjson-schema">1.Ajv校验json-schema<a class="anchor" href="#1ajv%E6%A0%A1%E9%AA%8Cjson-schema">§</a></h3>\n<ul>\n<li>\n<ol>\n<li>下载依赖</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit">yarn add ajv <span class="token operator">-</span>D\n</code></pre>\n</li>\n<li>\n<ol start="2">\n<li>引入ajv</li>\n</ol>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">*</span> eslint<span class="token operator">-</span>disable <span class="token operator">*</span><span class="token operator">/</span> 在typeScript中使用import会导致报错， 这使用eslint<span class="token operator">-</span>disable规避require的方式\n<span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n<span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> schema <span class="token operator">=</span> {\n  type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  properties<span class="token punctuation">:</span> {\n    name<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n      minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    age<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    record<span class="token punctuation">:</span> {\n      type<span class="token punctuation">:</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>{\n          type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n        }<span class="token punctuation">,</span>\n        {\n          type<span class="token punctuation">:</span> <span class="token string">\'number\'</span>\n        }<span class="token punctuation">,</span>\n      <span class="token punctuation">]</span>\n    }\n  }\n}\n<span class="token keyword">const</span> validate <span class="token operator">=</span> ajv<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n<span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>{\n  name<span class="token punctuation">:</span> <span class="token string">\'21312311231asddada\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n  record<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'sda\'</span><span class="token punctuation">,</span> <span class="token number">12131</span><span class="token punctuation">]</span>\n}<span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>!valid<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n\n</code></pre>\n<ol start="3">\n<li>format自定义ajv</li>\n</ol>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n<span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\najv<span class="token punctuation">.</span><span class="token function">addFormat</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  return data <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">\'hhh\'</span>\n}<span class="token punctuation">)</span>\n\nname<span class="token punctuation">:</span> {\n  type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n  minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  format<span class="token punctuation">:</span> <span class="token string">\'tset\'</span>\n}<span class="token punctuation">,</span>\n\n</code></pre>\n<h3 id="2ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97">2.Ajv自定义关键字<a class="anchor" href="#2ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97">§</a></h3>\n<pre><code>  1. 使用validate\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">   <span class="token operator">/</span><span class="token operator">*</span> eslint<span class="token operator">-</span>disable <span class="token operator">*</span><span class="token operator">/</span>\n <span class="token keyword">const</span> Ajv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ajv\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>\n <span class="token keyword">const</span> ajv <span class="token operator">=</span> new <span class="token function">Ajv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n <span class="token keyword">const</span> schema <span class="token operator">=</span> {\n   type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n   properties<span class="token punctuation">:</span> {\n     name<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n       <span class="token operator">/</span><span class="token operator">/</span> minLength<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n       <span class="token operator">/</span><span class="token operator">/</span> format<span class="token punctuation">:</span> <span class="token string">\'test\'</span><span class="token punctuation">,</span>\n       test<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n     }<span class="token punctuation">,</span>\n     age<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n     }<span class="token punctuation">,</span>\n     record<span class="token punctuation">:</span> {\n       type<span class="token punctuation">:</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n       items<span class="token punctuation">:</span> <span class="token punctuation">[</span>{\n           type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n         }<span class="token punctuation">,</span>\n         {\n           type<span class="token punctuation">:</span> <span class="token string">\'number\'</span>\n         }<span class="token punctuation">,</span>\n       <span class="token punctuation">]</span>\n     }\n   }\n }\n <span class="token operator">/</span><span class="token operator">/</span> 自定义关键字\n ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n   <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span>schema <span class="token operator">==</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> return <span class="token boolean">true</span>\n     <span class="token keyword">else</span> return data<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">6</span>\n     return <span class="token boolean">true</span>\n   }\n }<span class="token punctuation">)</span>\n <span class="token keyword">const</span> validate <span class="token operator">=</span> ajv<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n <span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>{\n   name<span class="token punctuation">:</span> <span class="token string">\'hhhs22\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n   record<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'sda\'</span><span class="token punctuation">,</span> <span class="token number">12131</span><span class="token punctuation">]</span>\n }<span class="token punctuation">)</span>\n <span class="token keyword">if</span> <span class="token punctuation">(</span>!valid<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n</code></pre>\n<pre><code>  1. 使用compile\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n <span class="token function">compile</span><span class="token punctuation">(</span>sche<span class="token punctuation">,</span> parentSchema<span class="token punctuation">)</span> {\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sche<span class="token punctuation">,</span> parentSchema<span class="token punctuation">)</span>\n   return <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n   }\n }<span class="token punctuation">)</span>\n 需要返回函数\n</code></pre>\n<pre><code>  1. 使用mataSchema\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n metaSchema<span class="token punctuation">:</span> {\n   type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n   }\n }<span class="token punctuation">)</span>\n 会检测每一个校验的值是否为string类型\n</code></pre>\n<h3 id="3ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">3.Ajv自定义错误信息<a class="anchor" href="#3ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">  ajv<span class="token punctuation">.</span><span class="token function">addKeyword</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> {\n    validate<span class="token punctuation">:</span> function <span class="token function">fun</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n      fun<span class="token punctuation">.</span>errors <span class="token operator">=</span> <span class="token punctuation">[</span>\n        {\n          keyword<span class="token punctuation">:</span> <span class="token string">\'test\'</span><span class="token punctuation">,</span>\n          message<span class="token punctuation">:</span> <span class="token string">\'自定义错误信息\'</span>\n        }\n      <span class="token punctuation">]</span>\n    } \n  }\n\n</code></pre>\n<h2 id="4%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B">4.开发组件库的主流程<a class="anchor" href="#4%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B">§</a></h2>\n<h3 id="%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0schema">开始实现schema<a class="anchor" href="#%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0schema">§</a></h3>\n<h4 id="%E4%B8%80%E8%88%AC%E4%BC%9A%E5%88%9B%E5%BB%BAtypes%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%A5%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B">一般会创建types文件夹来声明类型<a class="anchor" href="#%E4%B8%80%E8%88%AC%E4%BC%9A%E5%88%9B%E5%BB%BAtypes%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%A5%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">export <span class="token keyword">enum</span> SchemaTypes {\n  <span class="token string">\'NUMBER\'</span> <span class="token operator">=</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'STRING\'</span> <span class="token operator">=</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'INTEGER\'</span> <span class="token operator">=</span> <span class="token string">\'interger\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'OBJECT\'</span> <span class="token operator">=</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'ARRAY\'</span> <span class="token operator">=</span> <span class="token string">\'array\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'BOOLEAN\'</span> <span class="token operator">=</span> <span class="token string">\'boolean\'</span><span class="token punctuation">,</span>\n}\n\ntype SchemaRef <span class="token operator">=</span> { <span class="token variable">$ref</span><span class="token punctuation">:</span> string }\nexport interface Schema {\n  type<span class="token punctuation">:</span> SchemaTypes | string\n  <span class="token keyword">const</span><span class="token operator">?</span><span class="token punctuation">:</span> any\n  format<span class="token operator">?</span><span class="token punctuation">:</span> string\n  <span class="token keyword">default</span><span class="token operator">?</span><span class="token punctuation">:</span> any\n  properties<span class="token operator">?</span><span class="token punctuation">:</span> {\n    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> Schema | { <span class="token variable">$ref</span><span class="token punctuation">:</span> string }\n  }\n  item<span class="token operator">?</span><span class="token punctuation">:</span> Schema | Schema<span class="token punctuation">[</span><span class="token punctuation">]</span> | SchemaRef\n  dependcecies<span class="token operator">?</span><span class="token punctuation">:</span> {\n    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> | Schema | SchemaRef\n  }\n  oneOf<span class="token operator">?</span><span class="token punctuation">:</span> Schema<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">/</span><span class="token operator">/</span> vjsf<span class="token operator">?</span><span class="token punctuation">:</span> VueJsonSchemaConfig\n  required<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">enum</span><span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  enumKeyvalue<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  additionalProperties<span class="token operator">?</span><span class="token punctuation">:</span> any\n  additionalItems<span class="token operator">?</span><span class="token punctuation">:</span> Schema\n}\n\n</code></pre>\n<h3 id="%E4%BD%BF%E7%94%A8vue-jss-%E5%8F%AF%E5%AE%9E%E7%8E%B0css%E7%9A%84js%E5%8C%96">使用vue-jss 可实现css的js化<a class="anchor" href="#%E4%BD%BF%E7%94%A8vue-jss-%E5%8F%AF%E5%AE%9E%E7%8E%B0css%E7%9A%84js%E5%8C%96">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">import { createUseStyles } from <span class="token string">\'vue-jss\'</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">createUseStyles</span><span class="token punctuation">(</span>{\n  container<span class="token punctuation">:</span> {\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token punctuation">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token string">\'100%\'</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token string">\'1200px\'</span><span class="token punctuation">,</span>\n    margin<span class="token punctuation">:</span> <span class="token string">\'0 auto\'</span><span class="token punctuation">,</span>\n  }\n}<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> classesRef <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> classes <span class="token operator">=</span> classesRef<span class="token punctuation">.</span>value\n<span class="token operator">&lt;</span>div class<span class="token operator">=</span>{classes<span class="token punctuation">.</span>container}<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n</code></pre>\n<blockquote>\n<ul>\n<li>Captain Janeway</li>\n</ul>\n</blockquote>\n<h3 id="code">Code<a class="anchor" href="#code">§</a></h3>\n<p>There are many different ways to style code with GitHub\'s markdown. If you have inline code blocks, wrap them in backticks: <code>var example = true</code>.  If you\'ve got a longer block of code, you can indent with four spaces:</p>\n<pre><code>if (isAwesome){\n  return true\n}\n</code></pre>\n<p>GitHub also supports something called code fencing, which allows for multiple lines without indentation:</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">if</span> <span class="token punctuation">(</span>isAwesome<span class="token punctuation">)</span>{\n  return <span class="token boolean">true</span>\n}\n</code></pre>\n<p>And if you\'d like to use syntax highlighting, include the language:</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isAwesome<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="highlight-specific-lines">Highlight specific lines<a class="anchor" href="#highlight-specific-lines">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n<span class="highlighted-line">|   └── index<span class="token punctuation">.</span>html</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">└── docs    # Source directory</span><span class="highlighted-line">    └── README<span class="token punctuation">.</span>md</span></code></pre><h3 id="tables">Tables<a class="anchor" href="#tables">§</a></h3>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content from cell 1</td>\n<td>Content from cell 2</td>\n</tr>\n<tr>\n<td>Content in the first column</td>\n<td>Content in the second column</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="extras">Extras<a class="anchor" href="#extras">§</a></h2>\n<p>Pagic supports many extras in markdown.</p>\n<h3 id="tex-katex">TeX (KaTeX)<a class="anchor" href="#tex-katex">§</a></h3>\n<p>Inline: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Block:</p>\n<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mrow><mo fence="true">(</mo><msqrt><mrow><mi>ϕ</mi><msqrt><mn>5</mn></msqrt></mrow></msqrt><mo>−</mo><mi>ϕ</mi><mo fence="true">)</mo><msup><mi>e</mi><mrow><mfrac><mn>2</mn><mn>5</mn></mfrac><mi>π</mi></mrow></msup></mrow></mfrac><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>4</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>6</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>8</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mo>⋯</mo></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\n  \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\n  \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {\n    1+\frac{e^{-6\pi}}\n    {1+\frac{e^{-8\pi}}{1+\cdots}}\n  }\n}\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.01146em;vertical-align:-1.69002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mopen"><span class="delimsizing size2">(</span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.04139em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">ϕ</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width=\'400em\' height=\'1.08em\' viewBox=\'0 0 400000 1080\' preserveAspectRatio=\'xMinYMin slice\'><path d=\'M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.0013900000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width=\'400em\' height=\'1.28em\' viewBox=\'0 0 400000 1296\' preserveAspectRatio=\'xMinYMin slice\'><path d=\'M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z\'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19860999999999995em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose"><span class="delimsizing size2">)</span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.93957em;"><span style="top:-3.3485500000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.38em;"><span class="pstrut" style="height:3.15em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.827em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.69002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.692383em;vertical-align:-2.201275em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.19358em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.91642em;"><span style="top:-2.4519800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.229757142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32544em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="minner mtight">⋯</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">8</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.61533em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2097642857142856em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3948549999999997em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.201275em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" }, "1.\u76EE\u5F55\u7ED3\u6784")),
            React.createElement("li", null,
                React.createElement("a", { href: "#2%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" }, "2.\u542F\u52A8\u9879\u76EE\u51C6\u5907\u5DE5\u4F5C"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1vue3%E6%9B%B4%E6%96%B0%E6%A6%82%E8%A7%88" }, "1.Vue3\u66F4\u65B0\u6982\u89C8")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#2%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BAts%E9%A1%B9%E7%9B%AE" }, "2.\u4F7F\u7528vue-cli\u521B\u5EFATS\u9879\u76EE")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#3%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7prettier" }, "3.\u683C\u5F0F\u5316\u5DE5\u5177prettier")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#4h%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E6%83%85%E8%A7%A3%E8%AF%BB" }, "4.h\u51FD\u6570\u7684\u8BE6\u60C5\u89E3\u8BFB")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#5%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91vue3%E7%BB%84%E4%BB%B6" }, "5.\u4F7F\u7528jsx\u5F00\u53D1vue3\u7EC4\u4EF6")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#3json-schema%E6%A0%87%E5%87%86%E5%92%8C%E4%BD%BF%E7%94%A8" }, "3.Json-schema\u6807\u51C6\u548C\u4F7F\u7528"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1ajv%E6%A0%A1%E9%AA%8Cjson-schema" }, "1.Ajv\u6821\u9A8Cjson-schema")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#2ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E5%AD%97" }, "2.Ajv\u81EA\u5B9A\u4E49\u5173\u952E\u5B57")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#3ajv%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF" }, "3.Ajv\u81EA\u5B9A\u4E49\u9519\u8BEF\u4FE1\u606F")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#4%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B" }, "4.\u5F00\u53D1\u7EC4\u4EF6\u5E93\u7684\u4E3B\u6D41\u7A0B"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0schema" }, "\u5F00\u59CB\u5B9E\u73B0schema"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BD%BF%E7%94%A8vue-jss-%E5%8F%AF%E5%AE%9E%E7%8E%B0css%E7%9A%84js%E5%8C%96" }, "\u4F7F\u7528vue-jss \u53EF\u5B9E\u73B0css\u7684js\u5316")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#code" }, "Code"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#tables" }, "Tables")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#extras" }, "Extras"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#tex-katex" }, "TeX (KaTeX)")))))),
    'author': "ink-song",
    'contributors': [
        "ink-song"
    ],
    'date': "2024-02-05T09:41:51.000Z",
    'updated': null,
    'excerpt': "使用Vue3+ TypeScript打造一个企业级组件库 1.目录结构 1. 项目结构 2. 开发模式讲解 3. Vue3的定义 4. 单元测试 5. 高泛用性的API 6. 响应式原理 7. 完善功能开发 8. 自动化发布流程 2.启动项目准备工作 1.Vue3更新概览 1. vu...",
    'cover': "./imgaes/config.png",
    'sidebar': [
        {
            "text": "Introduction",
            "link": "introduction/index.html",
            "pagePath": "introduction/README.md"
        },
        {
            "link": "technology/index.html",
            "children": [
                {
                    "text": "Vue3 + TypeScript",
                    "link": "technology/vue3.html",
                    "pagePath": "technology/vue3.md"
                },
                {
                    "text": "TypeScript 积累",
                    "link": "technology/ts.html",
                    "pagePath": "technology/ts.md"
                },
                {
                    "text": "你不知道的 JS kk",
                    "link": "technology/你不知道的JS.html",
                    "pagePath": "technology/你不知道的JS.md"
                },
                {
                    "text": "Vue3 + TypeScript Cli 模板",
                    "link": "technology/vcli.html",
                    "pagePath": "technology/vcli.md"
                }
            ],
            "pagePath": "technology/README.md",
            "text": "Technology"
        },
        {
            "text": "Life",
            "children": [
                {
                    "text": "Guitar",
                    "link": "life/guitar.html",
                    "pagePath": "life/guitar.md"
                }
            ]
        },
        {
            "text": "Interview",
            "children": [
                {
                    "text": "Btyedance",
                    "link": "interview/btyedance.html",
                    "pagePath": "interview/btyedance.md"
                }
            ]
        },
        {
            "text": "Study",
            "children": [
                {
                    "text": "How We Learn",
                    "link": "study/HowWeLearn.html",
                    "pagePath": "study/HowWeLearn.md"
                }
            ]
        }
    ]
};
